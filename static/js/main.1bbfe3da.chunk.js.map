{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","logCourseInfo","bind","applyGrades","calculateGPA","addNewCourse","state","courses","onChange","key","id","courseInfo","totalPoints","totalCredits","totalGPA","points","credits","this","setState","i","length","undefined","console","log","GPA","toFixed","courseComponent","className","onClick","React","Component","Course","type","handleGradeChange","handleCreditChange","handleTypeChange","passInfo","isNaN","weighted","event","parseFloat","target","value","onInput","defaultValue","disabled","hidden","style","display","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1bbfe3da.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./App.css\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.logCourseInfo = this.logCourseInfo.bind(this);\n        this.applyGrades = this.applyGrades.bind(this);\n        this.calculateGPA = this.calculateGPA.bind(this);\n        this.addNewCourse = this.addNewCourse.bind(this);\n\n        this.state = {\n            courses: [                     \n                <Course \n                onChange={this.logCourseInfo} //takes the grade information from the Course component and throws it to the state to do calculations\n                key=\"course-0\"\n                id={0}\n                />\n            ],\n            courseInfo: []\n        }\n\n        this.state = {\n            ...this.state,\n            totalPoints: null,\n            totalCredits: null,\n            totalGPA: null,\n        }\n    }\n\n    logCourseInfo(points, credits, id) {\n        var courseInfo = this.state.courseInfo;\n        courseInfo[id] = [points, credits];\n\n        this.setState({ courseInfo: courseInfo}, () => this.applyGrades());\n    }\n\n    applyGrades() {\n        var totalPoints = 0;\n        var totalCredits = 0;\n\n        for (var i = 0; i < this.state.courseInfo.length; i++) {\n            if (this.state.courseInfo[i] === undefined)\n                continue;\n\n            totalPoints = totalPoints + this.state.courseInfo[i][0];\n            totalCredits = totalCredits + this.state.courseInfo[i][1];\n        }\n\n        console.log(totalPoints, totalCredits)\n        \n        this.setState({ \n            totalPoints: totalPoints,\n            totalCredits: totalCredits \n        }, () => this.calculateGPA());\n    }\n\n    calculateGPA() {\n        const points = this.state.totalPoints; const credits = this.state.totalCredits;\n        const GPA = points / credits;\n        this.setState({ GPA: GPA.toFixed(3) });\n    }\n\n    addNewCourse() {\n        this.setState(state => {\n            const courseComponent =                \n                <Course \n                onChange={this.logCourseInfo} //takes the grade information from the Course component and throws it to the state to do calculations\n                key={\"course-\" + state.courses.length}\n                id={state.courses.length}\n                />\n            const courses = [...state.courses, courseComponent];\n            \n            return {\n                courses\n            }\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <h1>TSA Unofficial GPA Calculator</h1>\n                <table className=\"center\">\n                    <thead>\n                        <tr>\n                            <th>Course Name</th>\n                            <th>Grade</th>\n                            <th>Credits</th>\n                            <th>Type</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.state.courses}\n                    </tbody>\n                </table>\n                <button onClick={this.addNewCourse}>Add New Course</button>\n                <h3>Your GPA is</h3>\n                <h1>{this.state.GPA}</h1>\n            </div>\n        );\n    }\n}\n\nclass Course extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            points: null,\n            credits: null,\n            type: null,\n        }\n\n        this.handleGradeChange = this.handleGradeChange.bind(this);\n        this.handleCreditChange = this.handleCreditChange.bind(this);\n        this.handleTypeChange = this.handleTypeChange.bind(this);\n        this.passInfo = this.passInfo.bind(this);\n    }\n\n    passInfo () {\n        if (this.state.points == null || isNaN(this.state.credits) || this.state.credits === 0 || this.state.credits === null || this.state.type == null)\n            return;\n\n        var points = this.state.points; const credits = this.state.credits; const type = this.state.type;\n\n        if (points <= 1.3) \n            points = points + 0;\n\n        else {\n            switch(type) {\n                default:\n                    break;\n\n                case \"Regular\":\n                    break;\n    \n                case \"Honors\":\n                        points = points + 0.7\n                    break;\n    \n                case \"CCP\":\n                    if(points === 4.3)\n                        points = 5;\n                    else\n                        points = points + 1;\n                    break;\n            }\n        }\n\n        console.log(points)\n\n        const weighted = points * credits;\n        \n        this.props.onChange(weighted, this.state.credits, this.props.id);\n    }\n\n    handleGradeChange (event) {\n        this.setState({ points : parseFloat(event.target.value)}, () => this.passInfo()); //takes the grade information on change and computes it\n    }\n\n    handleCreditChange (event) {\n        const credits = parseFloat(event.target.value);\n        this.setState({ credits : credits }, () => this.passInfo()); //takes the credit information on change and computes it\n    }\n\n    handleTypeChange (event) {\n        this.setState({ type : event.target.value }, () => this.passInfo()); //takes the course type information on change and computes it\n    }\n\n    render() {\n        return (\n            <tr>\n                <td>\n                    <input type=\"text\"></input>\n                </td>\n                <td>\n                    <select onInput={this.handleGradeChange} defaultValue=\"\">\n                        <option disabled hidden style={{display: \"none\"}} value=\"\"></option>\n                        <option value=\"4.3\">A+</option>\n                        <option value=\"4.0\">A</option>\n                        <option value=\"3.7\">A-</option>\n                        <option value=\"3.3\">B+</option>\n                        <option value=\"3\">B</option>\n                        <option value=\"2.7\">B-</option>\n                        <option value=\"2.3\">C+</option>\n                        <option value=\"2\">C</option>\n                        <option value=\"1.7\">C-</option>\n                        <option value=\"1.3\">D+</option>\n                        <option value=\"1\">D</option>\n                        <option value=\"0.7\">D-</option>\n                        <option value=\"0\">F</option>\n                    </select>\n                </td>\n                <td>\n                    <input type=\"text\" onChange={this.handleCreditChange}/>\n                </td>\n                <td>\n                    <select onInput={this.handleTypeChange} defaultValue=\"\">\n                        <option disabled hidden style={{display: \"none\"}} value=\"\"></option>\n                        <option value=\"Regular\">Regular</option>\n                        <option value=\"Honors\">Honors</option>\n                        <option value=\"CCP\">CCP</option>\n                    </select>\n                </td>\n            </tr>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won\"t work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let\"s check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It\"s the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can\"t reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}